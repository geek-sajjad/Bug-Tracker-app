// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   email     String   @unique
//   name      String?
//   role      Role     @default(USER)
//   posts     Post[]
// }

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique @db.VarChar(255)
  name             String?           @db.VarChar(255)
  hashedPassword   String            @db.VarChar(255)
  isAdmin          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  ownedProjects    Project[]
  assignedProjects UsersOnProjects[]
}

model Project {
  id            Int               @id @default(autoincrement())
  name          String            @db.VarChar(255)
  owner         User              @relation(fields: [ownerId], references: [id])
  ownerId       Int
  assignedUsers UsersOnProjects[]
  status        ProjectStatus     @default(OPEN)
  issues        Issue[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
}

model UsersOnProjects {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime @default(now())

  @@id([projectId, userId])
}

model Issue {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  status      IssueStatus @default(OPEN)
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   published Boolean  @default(false)
//   title     String   @db.VarChar(255)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }

// enum Role {
//   USER
//   ADMIN
// }

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOASE
}

enum ProjectStatus {
  OPEN
  CLOASE
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
